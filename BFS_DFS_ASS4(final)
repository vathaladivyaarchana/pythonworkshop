{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vathaladivyaarchana/pythonworkshop/blob/main/BFS_DFS_ASS4(final)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZmDwhBp2OOkS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 552
        },
        "outputId": "585a9fbb-22a6-4443-ef48-fc710f8f2534"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Edges of the graph: [('a', 'b'), ('a', 'f'), ('b', 'c'), ('b', 'e'), ('c', 'f'), ('d', 'g'), ('d', 'h'), ('g', 'h')]\n",
            "Nodes of the graph: ['a', 'b', 'c', 'e', 'f', 'd', 'g', 'h']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import networkx as nx\n",
        "\n",
        "# Create an empty undirected graph\n",
        "G = nx.Graph()\n",
        "\n",
        "# Add edges to the graph\n",
        "G.add_edges_from([('a', 'b'), ('b', 'c'), ('b', 'e'), ('a', 'f'), ('c', 'f'), ('d', 'g'), ('d', 'h'), ('g', 'h')])\n",
        "\n",
        "# To check the edges\n",
        "print(\"Edges of the graph:\", list(G.edges))\n",
        "\n",
        "# To check the nodes\n",
        "print(\"Nodes of the graph:\", list(G.nodes))\n",
        "\n",
        "nx.draw_circular(G, with_labels=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform DFS and get the nodes in depth-first order\n",
        "dfs_nodes = list(nx.dfs_preorder_nodes(G, source='a'))\n",
        "\n",
        "print(\"DFS Nodes in order:\", dfs_nodes)\n",
        "\n",
        "# Perform DFS and get the edges in depth-first order\n",
        "dfs_edges = list(nx.dfs_edges(G, source='a'))\n",
        "\n",
        "print(\"DFS Edges in order:\", dfs_edges)"
      ],
      "metadata": {
        "id": "HTkZO-dyQzXq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8f258a8-5c87-4a4b-e190-ac0d9974415e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DFS Nodes in order: ['a', 'b', 'c', 'f', 'e']\n",
            "DFS Edges in order: [('a', 'b'), ('b', 'c'), ('c', 'f'), ('b', 'e')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Draw the graph with DFS edges highlighted\n",
        "pos = nx.spring_layout(G)  # Generate layout\n",
        "nx.draw(G, pos, with_labels=True, node_color='lightblue')\n",
        "\n",
        "# Highlight DFS edges in red\n",
        "nx.draw_networkx_edges(G, pos, edgelist=dfs_edges, edge_color='r', width=2)\n"
      ],
      "metadata": {
        "id": "GtJKvUZ7PrLA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "outputId": "c6fb54e0-fd38-4842-b373-07b10f8b3c5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.LineCollection at 0x7ae23021a7a0>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "visited = []\n",
        "num_connected_comp = 0\n",
        "for node in G.nodes():\n",
        "  if node not in visited:\n",
        "    num_connected_comp += 1\n",
        "    # Perform DFS and get the nodes in depth-first order\n",
        "    dfs_nodes = list(nx.dfs_preorder_nodes(G, source=node))\n",
        "    print('Connected component', num_connected_comp, dfs_nodes)\n",
        "    #add the visited nodes to \"visited\"\n",
        "    visited += dfs_nodes\n",
        "\n",
        "#print(visited)"
      ],
      "metadata": {
        "id": "gep7g0kvQ-lD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32bbf572-e353-493e-8633-6dc24b274ade"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Connected component 1 ['a', 'b', 'c', 'f', 'e']\n",
            "Connected component 2 ['d', 'g', 'h']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform BFS and get the nodes in breadth-first order\n",
        "bfs_nodes = list(nx.bfs_tree(G, source='a'))\n",
        "print(\"BFS Nodes in order:\", bfs_nodes)\n",
        "\n",
        "# Perform BFS and get the edges in breadth-first order\n",
        "bfs_edges = list(nx.bfs_edges(G, source='a'))\n",
        "print(\"BFS Edges in order:\", bfs_edges)\n",
        "\n",
        "# Draw the graph with BFS edges highlighted\n",
        "nx.draw(G, pos, with_labels=True, node_color='lightgreen')\n",
        "nx.draw_networkx_edges(G, pos, edgelist=bfs_edges, edge_color='orange', width=2)\n",
        "\n"
      ],
      "metadata": {
        "id": "sgeeeOiDnIkf",
        "outputId": "8b9f9830-2683-4be4-fcd7-7ac015c1ecdc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 570
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BFS Nodes in order: ['a', 'b', 'f', 'c', 'e']\n",
            "BFS Edges in order: [('a', 'b'), ('a', 'f'), ('b', 'c'), ('b', 'e')]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.LineCollection at 0x7ae231582200>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "visited = []\n",
        "num_connected_comp = 0\n",
        "\n",
        "for node in G.nodes():\n",
        "    if node not in visited:\n",
        "        num_connected_comp += 1\n",
        "        # Perform BFS and get the nodes in breadth-first order\n",
        "        bfs_nodes = list(nx.bfs_tree(G, source=node).nodes())\n",
        "        print('Connected component', num_connected_comp, bfs_nodes)\n",
        "        # Add the visited nodes to \"visited\"\n",
        "        visited += bfs_nodes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "17W3W93af4_k",
        "outputId": "11c6de89-465b-4213-f63e-46548de3fe0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Connected component 1 ['a', 'b', 'f', 'c', 'e']\n",
            "Connected component 2 ['d', 'g', 'h']\n"
          ]
        }
      ]
    }
  ]
}